<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="uname" elementType="Argument">
            <stringProp name="Argument.name">uname</stringProp>
            <stringProp name="Argument.value">Admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="passwd" elementType="Argument">
            <stringProp name="Argument.name">passwd</stringProp>
            <stringProp name="Argument.value">admin123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="users" elementType="Argument">
            <stringProp name="Argument.name">users</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampup" elementType="Argument">
            <stringProp name="Argument.name">rampup</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iteration" elementType="Argument">
            <stringProp name="Argument.name">iteration</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
    </TestPlan>
    <hashTree>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager">
        <collectionProp name="AuthManager.auth_list">
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">https://play.google.com/</stringProp>
            <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
            <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
            <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
          </elementProp>
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">https://signaler-pa.clients6.google.com/punctual/v1/</stringProp>
            <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
            <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
            <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
          </elementProp>
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">https://prod-dynamite-prod-04-us-signaler-pa.clients6.google.com/punctual/multi-watch/</stringProp>
            <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
            <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
            <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
          </elementProp>
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">https://prod-dynamite-prod-04-us-signaler-pa.clients6.google.com/punctual/v1/</stringProp>
            <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
            <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
            <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
          </elementProp>
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">https://peoplestack-pa.clients6.google.com/$rpc/social.people.backend.service.intelligence.proto.PeopleStackIntelligenceService/</stringProp>
            <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
            <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
            <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
          </elementProp>
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">https://signaler-pa.clients6.google.com/punctual/multi-watch/</stringProp>
            <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
            <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
            <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
          </elementProp>
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">https://waa-pa.clients6.google.com/$rpc/google.internal.waa.v1.Waa/</stringProp>
            <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
            <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
            <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
          </elementProp>
          <elementProp name="" elementType="Authorization">
            <stringProp name="Authorization.url">https://www.youtube.com/youtubei/v1/</stringProp>
            <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
            <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
            <stringProp name="Authorization.domain"></stringProp>
            <stringProp name="Authorization.realm"></stringProp>
            <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
          </elementProp>
        </collectionProp>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="false">
        <stringProp name="ProxyControlGui.port">8888</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list"/>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">0</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.detect_graphql_request">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">0</intProp>
        <stringProp name="ProxyControlGui.default_encoding"></stringProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">false</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
      </ProxyControl>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">D:\JMETER\Practise\OrangeHRMProject1\LeaveViewResultsTree.xml</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Recruitment">
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampup}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">${iteration}</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import java.time.LocalDate
import java.time.format.DateTimeFormatter

def formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;)

def today = LocalDate.now()

def fromDate = today

def toDate = LocalDate.of(today.getYear(), 12, 31)

def fromDateStr = fromDate.format(formatter)
def toDateStr = toDate.format(formatter)

log.info(&quot;From Date: &quot; + fromDateStr)
log.info(&quot;To Date: &quot; + toDateStr)

vars.put(&quot;fromDate&quot;, fromDateStr)
vars.put(&quot;toDate&quot;, toDateStr)
</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://play.google.com/</stringProp>
              <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
              <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://signaler-pa.clients6.google.com/punctual/v1/</stringProp>
              <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
              <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://prod-dynamite-prod-04-us-signaler-pa.clients6.google.com/punctual/multi-watch/</stringProp>
              <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
              <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://prod-dynamite-prod-04-us-signaler-pa.clients6.google.com/punctual/v1/</stringProp>
              <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
              <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://peoplestack-pa.clients6.google.com/$rpc/social.people.backend.service.intelligence.proto.PeopleStackIntelligenceService/</stringProp>
              <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
              <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://signaler-pa.clients6.google.com/punctual/multi-watch/</stringProp>
              <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
              <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://waa-pa.clients6.google.com/$rpc/google.internal.waa.v1.Waa/</stringProp>
              <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
              <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://www.youtube.com/youtubei/v1/</stringProp>
              <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
              <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Thread Start">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">vars.put(&quot;iterationStart&quot;, System.currentTimeMillis().toString())</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">count</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller"/>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller Launch and Login">
            <stringProp name="IncludeController.includepath">D:\JMETER\Practise\OrangeHRMProject1\TF\LaunchAndLogin.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller Add Employee">
          <stringProp name="IncludeController.includepath">D:\JMETER\Practise\OrangeHRMProject1\TF\AddEmployee.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller Recruitment">
          <stringProp name="IncludeController.includepath">D:\JMETER\Practise\OrangeHRMProject1\TF\Recruitment.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(${count} == ${iteration})}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller Logout">
            <stringProp name="IncludeController.includepath">D:\JMETER\Practise\OrangeHRMProject1\TF\Logout.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Thread End" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">long pacingTime = 60000  // 60 seconds

long startTime = vars.get(&quot;iterationStart&quot;)?.toLong() ?: System.currentTimeMillis()
long now = System.currentTimeMillis()
long elapsed = now - startTime
long waitTime = pacingTime - elapsed

if (waitTime &gt; 0) {
    log.info(&quot;Pacing active - waiting &quot; + waitTime + &quot; ms&quot;)
    Thread.sleep(waitTime)
} else {
    log.info(&quot;Pacing not needed - elapsed time exceeded&quot;)
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Leave">
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampup}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">${iteration}</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://play.google.com/</stringProp>
              <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
              <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://signaler-pa.clients6.google.com/punctual/v1/</stringProp>
              <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
              <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://prod-dynamite-prod-04-us-signaler-pa.clients6.google.com/punctual/multi-watch/</stringProp>
              <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
              <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://prod-dynamite-prod-04-us-signaler-pa.clients6.google.com/punctual/v1/</stringProp>
              <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
              <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://peoplestack-pa.clients6.google.com/$rpc/social.people.backend.service.intelligence.proto.PeopleStackIntelligenceService/</stringProp>
              <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
              <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://signaler-pa.clients6.google.com/punctual/multi-watch/</stringProp>
              <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
              <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://waa-pa.clients6.google.com/$rpc/google.internal.waa.v1.Waa/</stringProp>
              <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
              <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
            </elementProp>
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url">https://www.youtube.com/youtubei/v1/</stringProp>
              <stringProp name="Authorization.username">${AUTH_LOGIN}</stringProp>
              <stringProp name="Authorization.password">${AUTH_PASSWORD}</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
              <stringProp name="Authorization.mechanism">KERBEROS</stringProp>
            </elementProp>
          </collectionProp>
          <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        </AuthManager>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">count</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">true</boolProp>
        </CounterConfig>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Thread Start" enabled="true">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">vars.put(&quot;iterationStart&quot;, System.currentTimeMillis().toString())</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller"/>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller Launch and Login">
            <stringProp name="IncludeController.includepath">D:\JMETER\Practise\OrangeHRMProject1\TF\LaunchAndLogin.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller Add Employee">
          <stringProp name="IncludeController.includepath">D:\JMETER\Practise\OrangeHRMProject1\TF\AddEmployee.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller Leave">
          <stringProp name="IncludeController.includepath">D:\JMETER\Practise\OrangeHRMProject1\TF\Leave.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller">
          <stringProp name="IfController.condition">${__javaScript(${count} == ${iteration})}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller Logout">
            <stringProp name="IncludeController.includepath">D:\JMETER\Practise\OrangeHRMProject1\TF\Logout.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Thread End" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">long pacingTime = 60000  // 60 seconds

long startTime = vars.get(&quot;iterationStart&quot;)?.toLong() ?: System.currentTimeMillis()
long now = System.currentTimeMillis()
long elapsed = now - startTime
long waitTime = pacingTime - elapsed

if (waitTime &gt; 0) {
    log.info(&quot;Pacing active - waiting &quot; + waitTime + &quot; ms&quot;)
    Thread.sleep(waitTime)
} else {
    log.info(&quot;Pacing not needed - elapsed time exceeded&quot;)
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="false">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">http://localhost:8086/write?db=JMETER</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">OrangeHRM</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">90;95;99</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">OrangeHRM</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
